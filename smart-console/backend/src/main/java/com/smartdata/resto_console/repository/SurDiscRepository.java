package com.smartdata.resto_console.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.query.Procedure;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.smartdata.resto_console.model.SurchargeDiscount;
import java.util.List;
import org.springframework.data.jpa.repository.Query;
@Repository
public interface SurDiscRepository extends JpaRepository<SurchargeDiscount, Integer> {

    // Declare stored procedure mapping here for use in service
    @Procedure(name = "addSurchargeDiscount")
    void addSurchargeDiscount(
        @Param("p_disc_desc") String disc_desc, 
        @Param("p_disc_type") String disc_type, 
        @Param("p_parent_disc_id") Integer parent_disc_id, 
        @Param("p_is_category") String is_category, 
        @Param("p_percentage") Double percentage, 
        @Param("p_amt") Double amt, 
        @Param("p_picture_src") String picture_src, 
        @Param("p_need_ref") String need_ref, 
        @Param("p_short_nm") String short_nm, 
        @Param("p_auto_flag") String auto_flag, 
        @Param("p_need_authorization") String need_authorization, 
        @Param("p_check_senior") String check_senior, 
        @Param("p_active_flag") String active_flag, 
        @Param("p_sm_discount_type") Integer sm_discount_type,
        @Param("p_pcnt_on_nv_flag") String pcnt_on_nv_flag,
        @Param("p_sort_order") Integer sort_order);

    @Procedure(name = "updateSurchargeDiscount")
    void updateSurchargeDiscount(
        @Param("p_disc_id") Integer id, 
        @Param("p_disc_desc") String disc_desc, 
        @Param("p_disc_type") String disc_type, 
        @Param("p_parent_disc_id") Integer parent_disc_id, 
        @Param("p_is_category") String is_category, 
        @Param("p_percentage") Double percentage, 
        @Param("p_amt") Double amt, 
        @Param("p_picture_src") String picture_src, 
        @Param("p_need_ref") String need_ref, 
        @Param("p_short_nm") String short_nm, 
        @Param("p_auto_flag") String auto_flag, 
        @Param("p_need_authorization") String need_authorization, 
        @Param("p_check_senior") String check_senior, 
        @Param("p_active_flag") String active_flag, 
        @Param("p_sm_discount_type") Integer sm_discount_type,
        @Param("p_pcnt_on_nv_flag") String pcnt_on_nv_flag,
        @Param("p_sort_order") Integer sort_order);

    @Procedure(name = "deleteSurchargeDiscount")
    void deleteSurchargeDiscount(@Param("p_disc_id") Integer id);

    // Auto-generated by JPA, no need for code
    @Query("SELECT p FROM SurchargeDiscount p WHERE LOWER(p.discDesc) LIKE LOWER(concat('%', :discDesc, '%')) ORDER BY p.sortOrder ASC, p.discDesc ASC")
    List<SurchargeDiscount> findByDiscDescContainingIgnoreCaseOrderBySortOrder(String discDesc);

    // auto generated by JPA, no need for code
    @Query("SELECT p FROM SurchargeDiscount p WHERE LOWER(p.isCategory) LIKE LOWER(concat('%', :isCategory, '%')) ORDER BY p.sortOrder ASC, p.discDesc ASC")
    List<SurchargeDiscount> findByIsCategoryContainingIgnoreCaseOrderBySortOrder(String isCategory);

    @Query("SELECT p FROM SurchargeDiscount p WHERE " +
        "(:parentDiscId = 0 AND p.parentDiscId IS NULL) " +
        "OR (:parentDiscId > 0 AND p.parentDiscId = :parentDiscId) " +
        "ORDER BY p.sortOrder ASC, p.discDesc ASC")
    List<SurchargeDiscount> findChildSurchargeDiscounts(@Param("parentDiscId") Integer parentDiscId);    

    // Auto-generated by JPA, no need for code
    @Query("SELECT p FROM SurchargeDiscount p ORDER BY p.sortOrder ASC, p.discDesc ASC")
    List<SurchargeDiscount> findAllByOrderBySortOrder();        
}
